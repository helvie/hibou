<?php
/**
 * Created by PhpStorm.
 * User: banan
 * Date: 26/04/2018
 * Time: 20:38
 */

namespace App\Controller;

use App\Entity\Article;
use App\Form\ArticleType;
use App\Repository\ArticleRepository;
use App\Entity\Prospect;
use App\Entity\ProspectInformation;
use App\Repository\LastActionRepository;
use App\Repository\NextActionRepository;
use App\Repository\ProspectRepository;
use App\Form\ProspectType;
use App\Form\ProspectInformationType;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use DateTime;
use DateInterval;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\EmailType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\Extension\Core\Type\HiddenType;
use Symfony\Component\Validator\Constraints\Length;

use App\Repository\CategoryRepository;
use Doctrine\Common\Collections\ArrayCollection;


class DefaultController extends Controller
{


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Création d'un nom unique de fichier~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps

        return md5(uniqid());
    }

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


    public function helloAnalytics(Request $request)
    {

        return $this->render('HelloAnalytics.html');

    }

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Affichage de la 2ème landing page ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


    public function lp2(Request $request)
    {

        return $this->render('lp2.html.twig');

    }


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Affichage de la 2ème landing page ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


    public function lp1(Request $request, ProspectRepository $prospectRepository, LastActionRepository
    $lastActionRepository, NextActionRepository $nextActionRepository, \Swift_Mailer $mailer)
    {
        // Initialisation de l'entité prospect information

        $formProspectInfo = new ProspectInformation();

        // Création du formulaire devis basé sur l'entité propsect information

        $formQuote = $this->createForm(ProspectInformationType::class, $formProspectInfo);
        $formQuote->handleRequest($request);

        // Initialisation date du jour

        $today = new dateTime();
        $today2 = $today -> format('d/m/Y');

        // Si le formulaire est validée

        if ($formQuote->isSubmitted() && $formQuote->isValid()) {

            // Vérification si un prospect existe avec le même mail

            $existingProspect = $prospectRepository->findOneByEmail($formProspectInfo -> getProspect() -> getEmail());

            // S'il existe, récupération de l'entité et de ses informations

            if($existingProspect != null){

                // Récupération booléan, s'il a précédemment demandé des infos ou une NL

                $thisProspect = $existingProspect;
                $NL = $thisProspect -> getNewsletterRequest();
                $information = $thisProspect -> getInformation();
                $infos = $thisProspect -> getInformationsRequest();


                if($thisProspect -> getProspectInformation() !=null){
                    $thisProspectInformation = $thisProspect -> getProspectInformation();
                }

                else {
                    $thisProspectInformation = new ProspectInformation();
                }
            }
            else
            {
                // S'il n'existe pas, création d'une nouvelle entité

                $thisProspect = new Prospect();
                $thisProspectInformation = new ProspectInformation();
                $NL = 0;
                $infos = 0;
                $information = "";

            }

            $newMessage = $formProspectInfo -> getProspect() -> getInformation();

            $thisProspect -> setName($formProspectInfo -> getCompany());
            $thisProspect -> setEmail($formProspectInfo -> getProspect() -> getEmail());
            $thisProspect -> setPhone($formProspectInfo -> getProspect()  -> getPhone());
            $thisProspect->setQuoteRequest(1);
            $thisProspect->setNewsletterRequest($NL);
            $thisProspect->setInformationsRequest($infos);
            $thisProspect->setArchived(0);
            $thisProspect->setLastAction($lastActionRepository -> find(2));
            $thisProspect->setLastActionDate($today);
            $thisProspect->setNextAction($nextActionRepository -> find(5));
            //Demandeur : 1-prospect, 2-commercial, 3-automatique
            $thisProspect->setApplicant(1);
            $thisProspect->setNextActionDate($today);
            $thisProspect->setInformation("<p>".$today2." - Demande de devis - Message : ".$newMessage."</p><p></p>".$information);

            $thisProspectInformation -> setCompany($formProspectInfo -> getCompany());
            $thisProspectInformation -> setRespCivility($formProspectInfo -> getRespCivility());
            $thisProspectInformation -> setRespName($formProspectInfo -> getRespName());
            $thisProspectInformation -> setSiret($formProspectInfo -> getSiret());
            $thisProspectInformation -> setActivity($formProspectInfo -> getActivity());
            $thisProspectInformation -> setRoute($formProspectInfo -> getRoute());
            $thisProspectInformation -> setPostalCode($formProspectInfo -> getPostalCode());
            $thisProspectInformation -> setLocality($formProspectInfo -> getLocality());

            $thisProspect -> setProspectInformation($thisProspectInformation);
            $thisProspectInformation -> setProspect($thisProspect);

            if($formProspectInfo -> getRespCivility()==0){
                $civ = "M.";
            }
            else{
                $civ = "Mme";
            }

            $em = $this->getDoctrine()->getManager();
            $em->persist($thisProspect);
            $em->persist($thisProspectInformation);
            $em->flush();

            // Envoi du mail d'info de demande de devis à l'agence

            $message = (new \Swift_Message("Demande de devis"))
                ->setFrom($formProspectInfo -> getProspect() -> getEmail())
                ->setTo("lehibouquigeek@gmail.com")
                ->setBody(
                    $this->renderView(
                    // templates/emails/registration.html.twig
                        'mailQuoteToAdmin.html.twig',
                        array(
                            'company' => $formProspectInfo -> getCompany(),
                            'name' => $civ." ".$formProspectInfo -> getRespName(),
                            'email' => $formProspectInfo -> getProspect() -> getEmail(),
                            'phone' => $formProspectInfo -> getProspect() -> getPhone(),
                            'siret' => $formProspectInfo -> getSiret(),
                            'activity' => $formProspectInfo -> getActivity(),
                            'address' => $formProspectInfo -> getRoute()." - ".$formProspectInfo -> getPostalCode()."".$formProspectInfo -> getLocality(),
                            'message' => $formProspectInfo -> getProspect() -> getInformation(),
                        )
                    ),
                    'text/html'
                );

            $mailer->send($message);



            return $this->redirectToRoute('index');

        }


        return $this->render('lp1.html.twig',
            array(
                'formQuote' => $formQuote->createView()

            )
        );
    }


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Affichage de la page de conditions générales de vente ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


    public function cgvDisplay(Request $request)
    {

        return $this-> render("cgv.html.twig");

    }


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Affichage de la page des mentions légales ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


    public function legalNoticeDisplay(Request $request)
    {

        return $this-> render("legalNotice.html.twig");

    }

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Affichage de la page des références ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


    public function owlReferencesDisplay(Request $request, ArticleRepository $articleRepository)
    {

        return $this-> render("owlReferences.html.twig");

    }


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Affichage de la page présentation de l'agence ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


    public function owlAgencyDisplay(Request $request, ArticleRepository $articleRepository)
    {

        return $this-> render("owlAgency.html.twig");

    }

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Affichage de la page des services de l'agence ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


    public function owlServicesDisplay(Request $request, ArticleRepository $articleRepository)
    {

        return $this-> render("owlServices.html.twig");

    }

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Affichage de la page blog ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


    public function owlBlogDisplay(Request $request, ArticleRepository $articleRepository)
    {
        // Récupération de tous les articles

        $articles = $articleRepository -> findAllArticles()->getArrayResult();

        // Récupération de l'Id du dernier article

        $latestArticle = end($articles);
        $latestArticleId = $latestArticle["id"];

        $var = 1;
        $array1 = [];
        $array2 = [];
        $array3 = [];
        $articleArray=[];

        // Distribution des articles sur trois tableaux

        foreach ($articles as &$value) {
            if ($var == 1) {
                array_push($array1, $value);
                $var=2;
            }
            else if($var==2) {
                array_push($array2, $value);
                $var=3;
            }
            else if($var==3){
                array_push($array3, $value);
                $var=1;
            }
        }

        // Rassemblement des 4 tableaux dans un unique tableau

        array_push($articleArray, $array1);
        array_push($articleArray, $array2);
        array_push($articleArray, $array3);
        array_push($articleArray, $articles);


        // Affichage de la page blog en y injectant les tableaux

        return $this-> render("owlBlog.html.twig", array
        (
            'articles' => $articleArray,
            'latestArticleId' => $latestArticleId
        ));

    }



//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Affichage de la page contact ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


    public function owlContactDisplay(Request $request, ArticleRepository $articleRepository)
    {

        return $this-> render("owlContact.html.twig");

    }

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Affichage de la page d'accueil ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


    public function owlHomeDisplay(Request $request, ProspectRepository $prospectRepository, LastActionRepository $lastActionRepository, NextActionRepository $nextActionRepository)
    {

        // Initialisation d'un tableau de noms de carte à jouer

        $cardsArray = array("1blue", "2blue", "1green", "2green", "1pink", "2pink", "1red", "2red", "1yellow", "2yellow", "1orange", "2orange");

        // Mélange du tableau

        shuffle($cardsArray);


        // Affichage du formulaire d'activité

        return $this->render('owlHome.html.twig', [
            "cardsArray" => $cardsArray,

        ]);

    }
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Enregistrement de la demande de NL en BDD ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


    public function owlPropectNLRegistred(Request $request, ProspectRepository $prospectRepository, LastActionRepository $lastActionRepository, NextActionRepository $nextActionRepository)
    {

        // Récupération du nom et du mail renseignés dans les champs de formulaire

        $name = $request -> request -> get("nameNL");
        $email = $request -> request -> get("mailNL");


        // Création d'une nouvelle entité prospect

        $formProspect = new Prospect();

        // Initialisation de la date du jour, auquel sont ajoutés 15 jours (pour pub éventuelle par la suite - pas mis
        // en place)
        $today = new dateTime();
        $today2 = $today -> format('d/m/Y');
        $today15 = new dateTime();
        $today15 -> add(new DateInterval('P15D'));


            // Vérification de l'existence du mail du prospect en bdd

            $existingProspect = $prospectRepository->findOneByEmail($email);

            $lastAction = $lastActionRepository -> find(1);
            $nextAction = $nextActionRepository -> find(4);

            // S'il existe récupération booléan de demande précédente éventuelle d'infos ou de devis

            if($existingProspect != null){
                $thisProspect = $existingProspect;
                $quote = $thisProspect -> getQuoteRequest();
                $infos = $thisProspect -> getInformationsRequest();
                $information = $thisProspect -> getInformation();
            }

            // Sinon, création nouvelle entité

            else{
                $thisProspect = new Prospect();
                $quote = "0";
                $infos = "0";
                $information = "";
            }
            $thisProspect->setName($name);
            $thisProspect->setEmail($email);
            $thisProspect->setQuoteRequest($quote);
            $thisProspect->setNewsletterRequest(1);
            $thisProspect->setInformationsRequest($infos);
            $thisProspect->setArchived(0);
            $thisProspect->setLastAction($lastAction);
            $thisProspect->setLastActionDate($today);
            $thisProspect->setNextAction($nextAction);
            $thisProspect->setApplicant(1);
            $thisProspect->setNextActionDate($today15);
            $thisProspect -> setInformation("<p>".$today2." - Inscription à la newsletter</p><p></p>".$information);
            $thisProspect->setRgpd(1);

            $em = $this->getDoctrine()->getManager();
            $em->persist($thisProspect);
            $em->flush();

            return new JsonResponse("ok");
    }





//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Affichage du formulaire de demande de contact ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


    public function formContactDisplay(Request $request, ProspectRepository $prospectRepository, LastActionRepository
                                        $lastActionRepository, NextActionRepository $nextActionRepository, \Swift_Mailer $mailer)
    {


        // Création d'un nouveau prospect (pour formulaire contact)

        $formContactRequest = new Prospect();

        // Création du formulaire basé sur le nouveau prospect

        $formRequest = $this->createForm(ProspectType::class, $formContactRequest);
        $formRequest->handleRequest($request);

        // Création nouvelle entité prospect information (pour formulaire devis)

        $formProspectInfo = new ProspectInformation();

        // création du formulaire devis basé sur l'entité

        $formQuote = $this->createForm(ProspectInformationType::class, $formProspectInfo);
        $formQuote->handleRequest($request);

        // Initialisation de la date du jour

        $today = new dateTime();
        $today2 = $today -> format('d/m/Y');

        // Si le formulaire de contact est validé

        if ($formRequest->isSubmitted() && $formRequest->isValid()) {

            // Vérification de l'existence d'un prospect avec la même adresse mail en bdd

            $existingProspect = $prospectRepository->findOneByEmail($formContactRequest -> getEmail());

            // S'il existe récupération booléan de demande précédente éventuelle de NL ou de devis

            if($existingProspect != null){
                $thisProspect = $existingProspect;
                $quote = $thisProspect -> getQuoteRequest();
                $NL = $thisProspect -> getNewsletterRequest();
                $information = $thisProspect -> getInformation();
            }

            // Sinon, création d'une nouvelle entité

            else{
                $thisProspect = new Prospect();
                $quote = "0";
                $NL = "0";
                $information = "";
            }

            // Récupération des actions

            $lastAction = $formContactRequest -> getLastAction();
            $nextAction = $formContactRequest -> getNextAction();
            $newMessage = $formContactRequest -> getInformation();

            $thisProspect->setName($formContactRequest -> getName());
            $thisProspect->setEmail($formContactRequest -> getEmail());
            $thisProspect->setQuoteRequest($quote);
            $thisProspect->setNewsletterRequest($NL);
            $thisProspect->setInformationsRequest(1);
            $thisProspect->setArchived(0);
            $thisProspect->setLastAction($lastAction);
            $thisProspect->setLastActionDate($today);
            $thisProspect->setNextAction($nextAction);
            $thisProspect->setApplicant(1);
            $thisProspect->setNextActionDate($formContactRequest -> getNextActionDate());
            $thisProspect->setPhone($formContactRequest -> getPhone());
            $thisProspect->setRgpd($formContactRequest -> getRgpd());


            // Ajout du texte de l'action au texte dans le champ "information", soit demande d'info, soit demande de rdv téléphonique

            if ($lastAction == $lastActionRepository -> find(12)) {$message = $today2." - Rendez-vous téléphonique demandé le ".
                $formContactRequest -> getNextActionDate()-> format('d/m/Y')." (".$nextAction->getAction()."). Message laissé : '".$newMessage."'";}

            else if ($lastAction == $lastActionRepository -> find(11)) {$message = $today2." - Informations demandées par mail. Message laissé : '"
                .$newMessage."'";}

            $thisProspect -> setInformation("<p>".$message."</p><p></p>".$information);

            $em = $this->getDoctrine()->getManager();
            $em->persist($thisProspect);
            $em->flush();

            // Selon action demandée, récupération du texte de l'action pour l'injecter dans le mail

            if($lastAction == $lastActionRepository -> find(12)){
                $requestPhone = 1;
                $phoneDate = $formContactRequest -> getNextActionDate();
                $phoneDate=date_format($phoneDate, 'd/m/Y');
                $phoneHour = $nextAction->getAction();

                            }
            else {
                $requestPhone = 0;
                $phoneDate = "";
                $phoneHour = "";
                            }

        // Envoi du mail à l'agence, regroupant toutes les données

            $message = (new \Swift_Message("Demande de contact"))
                ->setFrom("lehibouquigeek@gmail.com")
                ->setTo("lehibouquigeek@gmail.com")
                ->setBody(
                    $this->renderView(
                    // templates/emails/registration.html.twig
                        'mailContactToAdmin.html.twig',
                        array(
                            'name' => $formContactRequest -> getName(),
                            'email' => $formContactRequest -> getEmail(),
                            'phone' => $formContactRequest -> getPhone(),
                            'requestPhone' => $requestPhone,
                            'phoneDate' => $phoneDate,
                            'phoneHour' => $phoneHour,
                            'message' => $formContactRequest -> getInformation(),
                        )
                    ),
                    'text/html'
                );

            $mailer->send($message);

            return $this->redirectToRoute('owlContactDisplay', array(
                "Q" => 0,
                "C" => 1
            ));

    }

        // Si la demande de devis est validée

        if ($formQuote->isSubmitted() && $formQuote->isValid()) {

            // Vérification de l'existence d'un prospect avec la même adresse en BDD

            $existingProspect = $prospectRepository->findOneByEmail($formProspectInfo -> getProspect() -> getEmail());

            if($existingProspect != null){

                // S'il existe, récupération du booléean de demande précédente de NL ou info

                $thisProspect = $existingProspect;
                $NL = $thisProspect -> getNewsletterRequest();
                $information = $thisProspect -> getInformation();
                $infos = $thisProspect -> getInformationsRequest();


                if($thisProspect -> getProspectInformation() !=null){
                    $thisProspectInformation = $thisProspect -> getProspectInformation();
                }

                else {
                    $thisProspectInformation = new ProspectInformation();
                }
            }
            else
            {

                // Sinon, création d'une nouvelle entité

                $thisProspect = new Prospect();
                $thisProspectInformation = new ProspectInformation();
                $NL = 0;
                $infos = 0;
                $information = "";

            }

            // Récupération du champ info

            $newMessage = $formProspectInfo -> getProspect() -> getInformation();

            $thisProspect -> setName($formProspectInfo -> getCompany());
            $thisProspect -> setEmail($formProspectInfo -> getProspect() -> getEmail());
            $thisProspect -> setPhone($formProspectInfo -> getProspect()  -> getPhone());
            $thisProspect->setQuoteRequest(1);
            $thisProspect->setNewsletterRequest($NL);
            $thisProspect->setInformationsRequest($infos);
            $thisProspect->setArchived(0);
            $thisProspect->setLastAction($lastActionRepository -> find(2));
            $thisProspect->setLastActionDate($today);
            $thisProspect->setNextAction($nextActionRepository -> find(5));
            //Demandeur : 1-prospect, 2-commercial, 3-automatique
            $thisProspect->setApplicant(1);
            $thisProspect->setNextActionDate($today);
            $thisProspect->setRgpd($formProspectInfo -> getProspect() -> getInformation());

            // Ajout de la nouvelle action aux précédentes actions du champ "information"

            $thisProspect->setInformation("<p>".$today2." - Demande de devis - Message : ".$newMessage."</p><p></p>".$information);

            $thisProspectInformation -> setCompany($formProspectInfo -> getCompany());
            $thisProspectInformation -> setRespCivility($formProspectInfo -> getRespCivility());
            $thisProspectInformation -> setRespName($formProspectInfo -> getRespName());
            $thisProspectInformation -> setSiret($formProspectInfo -> getSiret());
            $thisProspectInformation -> setActivity($formProspectInfo -> getActivity());
            $thisProspectInformation -> setRoute($formProspectInfo -> getRoute());
            $thisProspectInformation -> setPostalCode($formProspectInfo -> getPostalCode());
            $thisProspectInformation -> setLocality($formProspectInfo -> getLocality());

            $thisProspect -> setProspectInformation($thisProspectInformation);
            $thisProspectInformation -> setProspect($thisProspect);

            if($formProspectInfo -> getRespCivility()==0){
                $civ = "M.";
            }
            else{
                $civ = "Mme";
            }

            $em = $this->getDoctrine()->getManager();
            $em->persist($thisProspect);
            $em->persist($thisProspectInformation);
            $em->flush();

                // Envoi du mail avec les infos de la demande du prospect à l'agence

                $message = (new \Swift_Message("Demande de devis"))
                ->setFrom("lehibouquigeek@gmail.com")
                ->setTo("lehibouquigeek@gmail.com")
                ->setBody(
                    $this->renderView(
                    // templates/emails/registration.html.twig
                        'mailQuoteToAdmin.html.twig',
                        array(
                            'company' => $formProspectInfo -> getCompany(),
                            'name' => $civ." ".$formProspectInfo -> getRespName(),
                            'email' => $formProspectInfo -> getProspect() -> getEmail(),
                            'phone' => $formProspectInfo -> getProspect() -> getPhone(),
                            'siret' => $formProspectInfo -> getSiret(),
                            'activity' => $formProspectInfo -> getActivity(),
                            'address' => $formProspectInfo -> getRoute()." - ".$formProspectInfo -> getPostalCode()."".$formProspectInfo -> getLocality(),
                            'message' => $formProspectInfo -> getProspect() -> getInformation(),
                            )
                    ),
                    'text/html'
                );

            $mailer->send($message);



            return $this->redirectToRoute('owlContactDisplay', array(
                "Q" => 1,
                "C" => 0
            ));

        }


        return $this->render('owlContact.html.twig',
            array(
                'formContactDisplay' => $formRequest->createView(),
                'formQuote' => $formQuote->createView(),
    )
        );
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


    public function essai(Request $request, ArticleRepository $articleRepository)
    {

        $cardsArray = array("1blue", "2blue", "1green", "2green", "1pink", "2pink", "1red", "2red", "1yellow", "2yellow",
            "1owl", "2owl");




        shuffle($cardsArray);


        return $this-> render("essai.html.twig", array(
            "cardsArray" => $cardsArray,
        ));

    }

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Suppression d'un article ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


    public function articleTrash(Request $request, ArticleRepository $articleRepository)
    {
        // Récupération de l'id de l'article envoyé en JS

        $articleId = $request->request->get('articleId');

        // Récupération de l'article

        $article = $articleRepository -> find($articleId);

        // Suppression de l'article

        $em = $this->getDoctrine()->getManager();
        $em->remove($article);
        $em->flush();

        return new JsonResponse("ok");

    }


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Affichage de l'espace d'administration des articles ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    public function adminArticleDisplay(Request $request, ArticleRepository $articleRepository){

        $articles = $articleRepository -> findAll();

        return $this-> render("adminArticle.html.twig", array
        (
            'articles' => $articles
        ));

    }

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Affichage de l'espace d'administration ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    public function adminSpaceDisplay(Request $request, ArticleRepository $articleRepository){

        return $this-> render("adminSpace.html.twig");

    }

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Enregistrement de l'action suivante ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    public function nextActionSave(Request $request, ProspectRepository $prospectRepository, NextActionRepository
    $nextActionRepository){


        // Initialisation de la date du jour

        $today = new dateTime();
        $today2 = $today -> format('d/m/Y');

        // Récupération de l'id du prospect, de l'id de l'action et du texte de l'action envoyés par js

        $prospectId = $request->request->get("prospectId");
        $prospectId = substr($prospectId,2);

        $nextActionId = $request->request->get("nextActionId");
        $nextActionArea = $request->request->get("nextActionArea");

        // Récupération de la date complete envoyée par js

        $nextFullActionDate = $request->request->get("nextFullActionDate");

        // Initialisation des variables jour, mois et année

        $day=substr($nextFullActionDate, 0,2);
        $month=substr($nextFullActionDate, 3,2);
        $year=substr($nextFullActionDate, 6);
        $date=new DateTime($month."/".$day."/".$year);

        // Récupération du prospect

        $prospect=$prospectRepository->find($prospectId);

        // Récupération de l'action suivante

        $nextAction = $nextActionRepository->find($nextActionId);
        $nextActionText = $nextAction->getAction();

        // Récupération du champ information du prospect

        $prospectInfo = $prospect->getInformation();

        // Ajout de la nouvelle action aux anciennes actions déjà présentes dans le champ information

        $message = "<p>".$today2." - ".$nextActionText.", le ".$nextFullActionDate." - Note : ".$nextActionArea."</p><p></p>".$prospectInfo;

        // Injection dans l'entité

        $prospect->setNextActionDate($date);
        $prospect->setNextAction($nextAction);
        $prospect->setInformation($message);


        $em = $this->getDoctrine()->getManager();
        $em->persist($prospect);
        $em->flush();

        $data=$prospect->getId();
        return new JsonResponse($data);

    }
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Enregistrement de l'action précédente ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


    public function lastActionSave(Request $request, ProspectRepository $prospectRepository, LastActionRepository
    $lastActionRepository){

        // Initialisation de la date du jour

        $today = new dateTime();
        $today2 = $today -> format('d/m/Y');

        // Récupération de l'id du prospect, de l'id de l'action et du texte de l'action envoyés par js

        $prospectId = $request->request->get("prospectId");
        $prospectId = substr($prospectId,2);

        $lastActionId = $request->request->get("lastActionId");
        $lastActionArea = $request->request->get("lastActionArea");

        // Récupération du prospect en bdd

        $prospect=$prospectRepository->find($prospectId);

        // Récupération de l'action précédente

        $lastAction = $lastActionRepository->find($lastActionId);
        $lastActionText = $lastAction->getAction();

        // Récupération du champ information du prospect

        $prospectInfo = $prospect->getInformation();

        // Ajout de la nouvelle action aux anciennes actions déjà présentes dans le champ information

        $message = "<p>".$today2." - ".$lastActionText." - Note : ".$lastActionArea."</p><p></p>".$prospectInfo;

        $prospect->setLastActionDate($today);
        $prospect->setLastAction($lastAction);
        $prospect->setInformation($message);

        $em = $this->getDoctrine()->getManager();
        $em->persist($prospect);
        $em->flush();

        return new JsonResponse($prospect->getId());


    }

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Affichage de la page d'administration du prospect ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    public function adminProspectDisplay(Request $request, ProspectRepository $prospectRepository){

        // Récupération de tous les prospects en bdd

        $prospects = $prospectRepository -> findAllProspects();

        return $this-> render("adminProspect.html.twig", array
        (
            'prospects' => $prospects
        ));

    }
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Affichage des articles ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
//
//
//    public function articleDisplay(Request $request, ArticleRepository $articleRepository)
//    {
//        $articleId = $request->query->get('art');
//
//        $article = $articleRepository -> find($articleId);
//
//        return $this->render("article.html.twig", array
//            (
//                'article' => $article
//            )
//        );
//    }

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~ Affichage du formulaire de création ou modification d'un article ~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


    public function articleFormDisplay(Request $request, ArticleRepository $articleRepository, CategoryRepository $categoryRepository)
    {

        // Récupération de l'id de l'article dans l'url

        if ($request->query->get("art")) {
            $articleId = $request->query->get("art");

            // Récupération de l'article

            $article = $articleRepository->findArticleById($articleId);
            $date = $article -> getDate();

            // Récupération de la photo de l'auteur et l'image de l'article

            $saveArticleImage = $article -> getArticleImage();
            $saveAuthorImage = $article -> getAuthorImage();

        }

        else

        {
            // Sinon, création d'une nouvelle entité article

            $article = new Article();
            $date = new DateTime;
            $saveArticleImage = "";
            $saveAuthorImage = "";
        }

        // Initialisation des dates de l'article à ""

        $article -> setDate("");
        $article -> setUpdateDate("");

        // Création du formulaire basé sur l'entité article

        $form = $this->createForm(ArticleType::class, $article);

        $form->handleRequest($request);

        // A la validation du formulaire

        if ($form->isSubmitted() && $form->isValid()) {

            // Récupération des données du formulaire

            $articleData = $form->getData();

            $article -> setDate($date);
            $article -> setUpdateDate($date);
            $article -> setValid(0);

            $entityManager = $this->getDoctrine()->getManager();

            if ($articleData -> getAuthorImage()) {

                // Renommage de l'image téléchargée et renvoi vers le dossier de stockage

                /** @var Symfony\Component\HttpFoundation\File\UploadedFile $file */
                $image = $articleData->getAuthorImage();
                $imageName = $this->generateUniqueFileName() . '.' . $image->guessExtension();

                // moves the file to the directory where brochures are stored
                $image->move(
                    $this->getParameter('persons_img_directory'),
                    $imageName
                );

                $article->setAuthorImage($imageName);

            }

            else {

                $article->setAuthorImage($saveAuthorImage);

            }


            if ($articleData -> getArticleImage()) {

                // Renommage de l'image téléchargée et renvoi vers le dossier de stockage

                /** @var Symfony\Component\HttpFoundation\File\UploadedFile $file */
                $image = $articleData->getArticleImage();
                $imageName = $this->generateUniqueFileName() . '.' . $image->guessExtension();

                // moves the file to the directory where brochures are stored
                $image->move(
                    $this->getParameter('persons_img_directory'),
                    $imageName
                );

                $article->setArticleImage($imageName);

            }
            else {
                $article->setArticleImage($saveArticleImage);

            }

            $categories = $articleData -> getCategories();

            // Envoi de chaque catégorie dans l'array collection categories

            foreach($categories as $cat) {
                $article -> addCategory($cat);
                $entityManager->persist($cat);
                $entityManager->persist($article);
            }

            $entityManager->flush();

            return $this->redirectToRoute("adminArticle");
        }


        return $this->render("formArticle.html.twig", array(
            'form' => $form->createView()
        ));



    }


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Formulaire de contact ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


    public function contactForm(Request $request, \Swift_Mailer $mailer)
    {

        // Création du formulaire

        $form = $this->createFormBuilder()


            ->add('subject', TextType::class, array(
                'constraints' => new Length(
                    array('min' => 4,
                        'max' => 30,
                        'minMessage' => "Vous devez saisir minimum 5 caractères",
                        'maxMessage' => "Vous devez saisir maximum 30 caractères"
                    )),
                'attr' => array(
                    'placeholder' => 'Objet',)
            ))

            ->add('name', TextType::class, array(
                'constraints' => new Length(
                    array('min' => 3,
                        'max' => 30,
                        'minMessage' => "Vous devez saisir minimum 3 caractères",
                        'maxMessage' => "Vous devez saisir maximum 20 caractères"
                    )),
                'attr' => array(
                    'placeholder' => 'Votre nom',)
            ))

            ->add('email', EmailType::class, array(

                'attr' => array(
                    'placeholder' => 'Votre email',)
            ))


            ->add('message', TextareaType::class, array(
                'constraints' => new Length(
                    array('min' => 10,
                        'max' => 1000,
                        'minMessage' => "Vous devez saisir minimum 10 caractères",
                        'maxMessage' => "Vous devez saisir maximum 1000 caractères"
                    )),
                'attr' => array(
                    'placeholder' => 'Votre message',)
            ))

            ->add('send', SubmitType::class, array(
                'label' => 'Envoyer'
            ))

            ->getForm();

        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $data = $form->getData();

            $message = (new \Swift_Message($data["subject"]))
                ->setFrom("lehibouquigeek@gmail.com")
                ->setTo("lehibouquigeek@gmail.com")
                ->setBody(
                    "Message de : ".$data["name"]." - ".$data["email"]." - ".
                    $data["message"]
                );

            $mailer->send($message);

            return $this->redirectToRoute('contactForm', array(
                "M" => 1
            ));

        }

        return $this->render("formMail.html.twig", array(
            'form' => $form->createView(),
        ));


    }
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Suppression de l'image ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


//    public function deleteAuthorImage(Request $request, OrganismPublicRepository $organismPublicRepository)
//    {
//
//        if ($request->isXMLHttpRequest()) // pour vérifier la présence d'une requete Ajax
//        {
//
//            // Récupération du nom de l'image à supprimer et de l'ID de l'organisme auquel elle est rattachée,
//            // envoyés par JS
//
//            $imageName = $request -> request -> get("imageName");
//            $orgPubId = $request -> request -> get("orgPubId");
//
//            // Création de l'accès aux dossiers contenant les fichiers
//
//            $fileSystem = new Filesystem();
//
//            // Récupération de la route du fichier, envoyée par JS, complétée du nom de l'image
//
//            $imagePath = $request -> request -> get("imagePath").$imageName;
//
//            // Suppression de l'image si elle est présente dans le dossier
//
//            if($fileSystem->exists($imagePath) == true){
//                $fileSystem->remove($imagePath);
//            }
//
//            // Récupération de l'entité de données publiques de l'organisme concerné
//
//            $organismPublic = $organismPublicRepository -> findOneById($orgPubId);
//
//            // Suppression du nom de l'image dans l'entité et enregistrement en BDD
//
//            $organismPublic -> setImage(null);
//
//            $em = $this->getDoctrine()->getManager();
//            $em->persist($organismPublic);
//            $em->flush();
//
//
//        }
//
//        return new JsonResponse("Delete image ok");
//
//
//    }


}
